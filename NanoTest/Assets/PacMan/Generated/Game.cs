using NanoEcs; 

using UnityEngine;//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class DeadPlayerMarkerComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public DeadPlayerMarkerComponent DeadPlayerMarker
	{
        get
        {
            if (!Has(GameComponentsMap.DeadPlayerMarker))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<DeadPlayerMarkerComponent>(GameComponentsMap.DeadPlayerMarker);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddDeadPlayerMarker (int ignore)
	{
		var c = Add<DeadPlayerMarkerComponent>(GameComponentsMap.DeadPlayerMarker);
		c.Ignore = ignore;
		return this;
	}
	
	public GameEntity SafelyAddDeadPlayerMarker (int ignore)
	{
		DeadPlayerMarkerComponent c;
        if (HasDeadPlayerMarker)
        {
            c = DeadPlayerMarker;
        } else
        {
            c = Add<DeadPlayerMarkerComponent>(GameComponentsMap.DeadPlayerMarker);
        }
        c.Ignore = ignore;
        return this;
	}
	
	public GameEntity RemoveDeadPlayerMarker ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.DeadPlayerMarker);
		return this;
	}
	
	public bool HasDeadPlayerMarker 
	{
			get 
			{
				return Has(GameComponentsMap.DeadPlayerMarker);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup DeadPlayerMarker
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.DeadPlayerMarker);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup DeadPlayerMarker
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.DeadPlayerMarker);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup DeadPlayerMarker
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.DeadPlayerMarker);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class EnergizerMarkerComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public EnergizerMarkerComponent EnergizerMarker
	{
        get
        {
            if (!Has(GameComponentsMap.EnergizerMarker))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<EnergizerMarkerComponent>(GameComponentsMap.EnergizerMarker);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddEnergizerMarker (int ignore)
	{
		var c = Add<EnergizerMarkerComponent>(GameComponentsMap.EnergizerMarker);
		c.Ignore = ignore;
		return this;
	}
	
	public GameEntity SafelyAddEnergizerMarker (int ignore)
	{
		EnergizerMarkerComponent c;
        if (HasEnergizerMarker)
        {
            c = EnergizerMarker;
        } else
        {
            c = Add<EnergizerMarkerComponent>(GameComponentsMap.EnergizerMarker);
        }
        c.Ignore = ignore;
        return this;
	}
	
	public GameEntity RemoveEnergizerMarker ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.EnergizerMarker);
		return this;
	}
	
	public bool HasEnergizerMarker 
	{
			get 
			{
				return Has(GameComponentsMap.EnergizerMarker);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup EnergizerMarker
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.EnergizerMarker);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup EnergizerMarker
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.EnergizerMarker);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup EnergizerMarker
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.EnergizerMarker);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class FoodComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public FoodComponent Food
	{
        get
        {
            if (!Has(GameComponentsMap.Food))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<FoodComponent>(GameComponentsMap.Food);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddFood (int scores, float speedPenalty)
	{
		var c = Add<FoodComponent>(GameComponentsMap.Food);
		c.Scores = scores;
        c.SpeedPenalty = speedPenalty;
		return this;
	}
	
	public GameEntity SafelyAddFood (int scores, float speedPenalty)
	{
		FoodComponent c;
        if (HasFood)
        {
            c = Food;
        } else
        {
            c = Add<FoodComponent>(GameComponentsMap.Food);
        }
        c.Scores = scores;
        c.SpeedPenalty = speedPenalty;
        return this;
	}
	
	public GameEntity RemoveFood ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.Food);
		return this;
	}
	
	public bool HasFood 
	{
			get 
			{
				return Has(GameComponentsMap.Food);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup Food
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.Food);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup Food
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.Food);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup Food
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.Food);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class GameStateSwitchRequestComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public GameStateSwitchRequestComponent GameStateSwitchRequest
	{
        get
        {
            if (!Has(GameComponentsMap.GameStateSwitchRequest))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<GameStateSwitchRequestComponent>(GameComponentsMap.GameStateSwitchRequest);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddGameStateSwitchRequest (GameStates newState)
	{
		var c = Add<GameStateSwitchRequestComponent>(GameComponentsMap.GameStateSwitchRequest);
		c.NewState = newState;
		return this;
	}
	
	public GameEntity SafelyAddGameStateSwitchRequest (GameStates newState)
	{
		GameStateSwitchRequestComponent c;
        if (HasGameStateSwitchRequest)
        {
            c = GameStateSwitchRequest;
        } else
        {
            c = Add<GameStateSwitchRequestComponent>(GameComponentsMap.GameStateSwitchRequest);
        }
        c.NewState = newState;
        return this;
	}
	
	public GameEntity RemoveGameStateSwitchRequest ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.GameStateSwitchRequest);
		return this;
	}
	
	public bool HasGameStateSwitchRequest 
	{
			get 
			{
				return Has(GameComponentsMap.GameStateSwitchRequest);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup GameStateSwitchRequest
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.GameStateSwitchRequest);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup GameStateSwitchRequest
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.GameStateSwitchRequest);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup GameStateSwitchRequest
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.GameStateSwitchRequest);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class GhostComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public GhostComponent Ghost
	{
        get
        {
            if (!Has(GameComponentsMap.Ghost))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<GhostComponent>(GameComponentsMap.Ghost);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddGhost (GhostTypes ghostType, Renderer renderer, MaterialPropertyBlock materialPropertyBlock)
	{
		var c = Add<GhostComponent>(GameComponentsMap.Ghost);
		c.GhostType = ghostType;
        c.Renderer = renderer;
        c.MaterialPropertyBlock = materialPropertyBlock;
		return this;
	}
	
	public GameEntity SafelyAddGhost (GhostTypes ghostType, Renderer renderer, MaterialPropertyBlock materialPropertyBlock)
	{
		GhostComponent c;
        if (HasGhost)
        {
            c = Ghost;
        } else
        {
            c = Add<GhostComponent>(GameComponentsMap.Ghost);
        }
        c.GhostType = ghostType;
        c.Renderer = renderer;
        c.MaterialPropertyBlock = materialPropertyBlock;
        return this;
	}
	
	public GameEntity RemoveGhost ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.Ghost);
		return this;
	}
	
	public bool HasGhost 
	{
			get 
			{
				return Has(GameComponentsMap.Ghost);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup Ghost
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.Ghost);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup Ghost
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.Ghost);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup Ghost
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.Ghost);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class GhostFearStateRequestComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public GhostFearStateRequestComponent GhostFearStateRequest
	{
        get
        {
            if (!Has(GameComponentsMap.GhostFearStateRequest))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<GhostFearStateRequestComponent>(GameComponentsMap.GhostFearStateRequest);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddGhostFearStateRequest (int ignore)
	{
		var c = Add<GhostFearStateRequestComponent>(GameComponentsMap.GhostFearStateRequest);
		c.Ignore = ignore;
		return this;
	}
	
	public GameEntity SafelyAddGhostFearStateRequest (int ignore)
	{
		GhostFearStateRequestComponent c;
        if (HasGhostFearStateRequest)
        {
            c = GhostFearStateRequest;
        } else
        {
            c = Add<GhostFearStateRequestComponent>(GameComponentsMap.GhostFearStateRequest);
        }
        c.Ignore = ignore;
        return this;
	}
	
	public GameEntity RemoveGhostFearStateRequest ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.GhostFearStateRequest);
		return this;
	}
	
	public bool HasGhostFearStateRequest 
	{
			get 
			{
				return Has(GameComponentsMap.GhostFearStateRequest);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup GhostFearStateRequest
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.GhostFearStateRequest);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup GhostFearStateRequest
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.GhostFearStateRequest);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup GhostFearStateRequest
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.GhostFearStateRequest);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class GhostInFearStateComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public GhostInFearStateComponent GhostInFearState
	{
        get
        {
            if (!Has(GameComponentsMap.GhostInFearState))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<GhostInFearStateComponent>(GameComponentsMap.GhostInFearState);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddGhostInFearState (float estimateTime)
	{
		var c = Add<GhostInFearStateComponent>(GameComponentsMap.GhostInFearState);
		c.EstimateTime = estimateTime;
		return this;
	}
	
	public GameEntity SafelyAddGhostInFearState (float estimateTime)
	{
		GhostInFearStateComponent c;
        if (HasGhostInFearState)
        {
            c = GhostInFearState;
        } else
        {
            c = Add<GhostInFearStateComponent>(GameComponentsMap.GhostInFearState);
        }
        c.EstimateTime = estimateTime;
        return this;
	}
	
	public GameEntity RemoveGhostInFearState ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.GhostInFearState);
		return this;
	}
	
	public bool HasGhostInFearState 
	{
			get 
			{
				return Has(GameComponentsMap.GhostInFearState);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup GhostInFearState
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.GhostInFearState);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup GhostInFearState
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.GhostInFearState);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup GhostInFearState
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.GhostInFearState);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class InitializedScoreTableMarkerComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public InitializedScoreTableMarkerComponent InitializedScoreTableMarker
	{
        get
        {
            if (!Has(GameComponentsMap.InitializedScoreTableMarker))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<InitializedScoreTableMarkerComponent>(GameComponentsMap.InitializedScoreTableMarker);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddInitializedScoreTableMarker (int ignore)
	{
		var c = Add<InitializedScoreTableMarkerComponent>(GameComponentsMap.InitializedScoreTableMarker);
		c.Ignore = ignore;
		return this;
	}
	
	public GameEntity SafelyAddInitializedScoreTableMarker (int ignore)
	{
		InitializedScoreTableMarkerComponent c;
        if (HasInitializedScoreTableMarker)
        {
            c = InitializedScoreTableMarker;
        } else
        {
            c = Add<InitializedScoreTableMarkerComponent>(GameComponentsMap.InitializedScoreTableMarker);
        }
        c.Ignore = ignore;
        return this;
	}
	
	public GameEntity RemoveInitializedScoreTableMarker ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.InitializedScoreTableMarker);
		return this;
	}
	
	public bool HasInitializedScoreTableMarker 
	{
			get 
			{
				return Has(GameComponentsMap.InitializedScoreTableMarker);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup InitializedScoreTableMarker
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.InitializedScoreTableMarker);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup InitializedScoreTableMarker
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.InitializedScoreTableMarker);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup InitializedScoreTableMarker
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.InitializedScoreTableMarker);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class ItemMarkerComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public ItemMarkerComponent ItemMarker
	{
        get
        {
            if (!Has(GameComponentsMap.ItemMarker))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<ItemMarkerComponent>(GameComponentsMap.ItemMarker);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddItemMarker (int ignore)
	{
		var c = Add<ItemMarkerComponent>(GameComponentsMap.ItemMarker);
		c.Ignore = ignore;
		return this;
	}
	
	public GameEntity SafelyAddItemMarker (int ignore)
	{
		ItemMarkerComponent c;
        if (HasItemMarker)
        {
            c = ItemMarker;
        } else
        {
            c = Add<ItemMarkerComponent>(GameComponentsMap.ItemMarker);
        }
        c.Ignore = ignore;
        return this;
	}
	
	public GameEntity RemoveItemMarker ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.ItemMarker);
		return this;
	}
	
	public bool HasItemMarker 
	{
			get 
			{
				return Has(GameComponentsMap.ItemMarker);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup ItemMarker
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.ItemMarker);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup ItemMarker
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.ItemMarker);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup ItemMarker
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.ItemMarker);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class ItemTakenEventComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public ItemTakenEventComponent ItemTakenEvent
	{
        get
        {
            if (!Has(GameComponentsMap.ItemTakenEvent))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<ItemTakenEventComponent>(GameComponentsMap.ItemTakenEvent);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddItemTakenEvent (GameEntity playerEntity)
	{
		var c = Add<ItemTakenEventComponent>(GameComponentsMap.ItemTakenEvent);
		c.PlayerEntity = playerEntity;
		return this;
	}
	
	public GameEntity SafelyAddItemTakenEvent (GameEntity playerEntity)
	{
		ItemTakenEventComponent c;
        if (HasItemTakenEvent)
        {
            c = ItemTakenEvent;
        } else
        {
            c = Add<ItemTakenEventComponent>(GameComponentsMap.ItemTakenEvent);
        }
        c.PlayerEntity = playerEntity;
        return this;
	}
	
	public GameEntity RemoveItemTakenEvent ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.ItemTakenEvent);
		return this;
	}
	
	public bool HasItemTakenEvent 
	{
			get 
			{
				return Has(GameComponentsMap.ItemTakenEvent);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup ItemTakenEvent
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.ItemTakenEvent);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup ItemTakenEvent
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.ItemTakenEvent);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup ItemTakenEvent
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.ItemTakenEvent);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class MovementComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public MovementComponent Movement
	{
        get
        {
            if (!Has(GameComponentsMap.Movement))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<MovementComponent>(GameComponentsMap.Movement);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddMovement (float speed, Directions heading, Vector2Int desiredPosition)
	{
		var c = Add<MovementComponent>(GameComponentsMap.Movement);
		c.Speed = speed;
        c.Heading = heading;
        c.DesiredPosition = desiredPosition;
		return this;
	}
	
	public GameEntity SafelyAddMovement (float speed, Directions heading, Vector2Int desiredPosition)
	{
		MovementComponent c;
        if (HasMovement)
        {
            c = Movement;
        } else
        {
            c = Add<MovementComponent>(GameComponentsMap.Movement);
        }
        c.Speed = speed;
        c.Heading = heading;
        c.DesiredPosition = desiredPosition;
        return this;
	}
	
	public GameEntity RemoveMovement ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.Movement);
		return this;
	}
	
	public bool HasMovement 
	{
			get 
			{
				return Has(GameComponentsMap.Movement);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup Movement
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.Movement);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup Movement
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.Movement);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup Movement
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.Movement);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class MovementStoppedMarkerComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public MovementStoppedMarkerComponent MovementStoppedMarker
	{
        get
        {
            if (!Has(GameComponentsMap.MovementStoppedMarker))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<MovementStoppedMarkerComponent>(GameComponentsMap.MovementStoppedMarker);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddMovementStoppedMarker (int ignore)
	{
		var c = Add<MovementStoppedMarkerComponent>(GameComponentsMap.MovementStoppedMarker);
		c.Ignore = ignore;
		return this;
	}
	
	public GameEntity SafelyAddMovementStoppedMarker (int ignore)
	{
		MovementStoppedMarkerComponent c;
        if (HasMovementStoppedMarker)
        {
            c = MovementStoppedMarker;
        } else
        {
            c = Add<MovementStoppedMarkerComponent>(GameComponentsMap.MovementStoppedMarker);
        }
        c.Ignore = ignore;
        return this;
	}
	
	public GameEntity RemoveMovementStoppedMarker ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.MovementStoppedMarker);
		return this;
	}
	
	public bool HasMovementStoppedMarker 
	{
			get 
			{
				return Has(GameComponentsMap.MovementStoppedMarker);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup MovementStoppedMarker
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.MovementStoppedMarker);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup MovementStoppedMarker
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.MovementStoppedMarker);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup MovementStoppedMarker
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.MovementStoppedMarker);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class MovementTargetComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public MovementTargetComponent MovementTarget
	{
        get
        {
            if (!Has(GameComponentsMap.MovementTarget))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<MovementTargetComponent>(GameComponentsMap.MovementTarget);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddMovementTarget (Vector2Int target)
	{
		var c = Add<MovementTargetComponent>(GameComponentsMap.MovementTarget);
		c.Target = target;
		return this;
	}
	
	public GameEntity SafelyAddMovementTarget (Vector2Int target)
	{
		MovementTargetComponent c;
        if (HasMovementTarget)
        {
            c = MovementTarget;
        } else
        {
            c = Add<MovementTargetComponent>(GameComponentsMap.MovementTarget);
        }
        c.Target = target;
        return this;
	}
	
	public GameEntity RemoveMovementTarget ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.MovementTarget);
		return this;
	}
	
	public bool HasMovementTarget 
	{
			get 
			{
				return Has(GameComponentsMap.MovementTarget);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup MovementTarget
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.MovementTarget);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup MovementTarget
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.MovementTarget);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup MovementTarget
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.MovementTarget);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class PauseMenuComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public PauseMenuComponent PauseMenu
	{
        get
        {
            if (!Has(GameComponentsMap.PauseMenu))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<PauseMenuComponent>(GameComponentsMap.PauseMenu);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddPauseMenu (UnityEngine.GameObject root, UnityEngine.UI.Text menuText, UnityEngine.UI.Button continueBtn, UnityEngine.UI.Button restartBtn, UnityEngine.UI.Button quitBtn)
	{
		var c = Add<PauseMenuComponent>(GameComponentsMap.PauseMenu);
		c.Root = root;
        c.MenuText = menuText;
        c.ContinueBtn = continueBtn;
        c.RestartBtn = restartBtn;
        c.QuitBtn = quitBtn;
		return this;
	}
	
	public GameEntity SafelyAddPauseMenu (UnityEngine.GameObject root, UnityEngine.UI.Text menuText, UnityEngine.UI.Button continueBtn, UnityEngine.UI.Button restartBtn, UnityEngine.UI.Button quitBtn)
	{
		PauseMenuComponent c;
        if (HasPauseMenu)
        {
            c = PauseMenu;
        } else
        {
            c = Add<PauseMenuComponent>(GameComponentsMap.PauseMenu);
        }
        c.Root = root;
        c.MenuText = menuText;
        c.ContinueBtn = continueBtn;
        c.RestartBtn = restartBtn;
        c.QuitBtn = quitBtn;
        return this;
	}
	
	public GameEntity RemovePauseMenu ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.PauseMenu);
		return this;
	}
	
	public bool HasPauseMenu 
	{
			get 
			{
				return Has(GameComponentsMap.PauseMenu);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup PauseMenu
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.PauseMenu);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup PauseMenu
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.PauseMenu);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup PauseMenu
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.PauseMenu);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class PlayerComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public PlayerComponent Player
	{
        get
        {
            if (!Has(GameComponentsMap.Player))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<PlayerComponent>(GameComponentsMap.Player);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddPlayer (int num, int scores, int lives, Vector2Int spawnPosition)
	{
		var c = Add<PlayerComponent>(GameComponentsMap.Player);
		c.Num = num;
        c.Scores = scores;
        c.Lives = lives;
        c.SpawnPosition = spawnPosition;
		return this;
	}
	
	public GameEntity SafelyAddPlayer (int num, int scores, int lives, Vector2Int spawnPosition)
	{
		PlayerComponent c;
        if (HasPlayer)
        {
            c = Player;
        } else
        {
            c = Add<PlayerComponent>(GameComponentsMap.Player);
        }
        c.Num = num;
        c.Scores = scores;
        c.Lives = lives;
        c.SpawnPosition = spawnPosition;
        return this;
	}
	
	public GameEntity RemovePlayer ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.Player);
		return this;
	}
	
	public bool HasPlayer 
	{
			get 
			{
				return Has(GameComponentsMap.Player);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup Player
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.Player);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup Player
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.Player);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup Player
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.Player);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class PlayerDeathRequestComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public PlayerDeathRequestComponent PlayerDeathRequest
	{
        get
        {
            if (!Has(GameComponentsMap.PlayerDeathRequest))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<PlayerDeathRequestComponent>(GameComponentsMap.PlayerDeathRequest);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddPlayerDeathRequest (int ignore)
	{
		var c = Add<PlayerDeathRequestComponent>(GameComponentsMap.PlayerDeathRequest);
		c.Ignore = ignore;
		return this;
	}
	
	public GameEntity SafelyAddPlayerDeathRequest (int ignore)
	{
		PlayerDeathRequestComponent c;
        if (HasPlayerDeathRequest)
        {
            c = PlayerDeathRequest;
        } else
        {
            c = Add<PlayerDeathRequestComponent>(GameComponentsMap.PlayerDeathRequest);
        }
        c.Ignore = ignore;
        return this;
	}
	
	public GameEntity RemovePlayerDeathRequest ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.PlayerDeathRequest);
		return this;
	}
	
	public bool HasPlayerDeathRequest 
	{
			get 
			{
				return Has(GameComponentsMap.PlayerDeathRequest);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup PlayerDeathRequest
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.PlayerDeathRequest);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup PlayerDeathRequest
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.PlayerDeathRequest);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup PlayerDeathRequest
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.PlayerDeathRequest);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class PlayerScoreChangedEventComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public PlayerScoreChangedEventComponent PlayerScoreChangedEvent
	{
        get
        {
            if (!Has(GameComponentsMap.PlayerScoreChangedEvent))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<PlayerScoreChangedEventComponent>(GameComponentsMap.PlayerScoreChangedEvent);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddPlayerScoreChangedEvent (int ignore)
	{
		var c = Add<PlayerScoreChangedEventComponent>(GameComponentsMap.PlayerScoreChangedEvent);
		c.Ignore = ignore;
		return this;
	}
	
	public GameEntity SafelyAddPlayerScoreChangedEvent (int ignore)
	{
		PlayerScoreChangedEventComponent c;
        if (HasPlayerScoreChangedEvent)
        {
            c = PlayerScoreChangedEvent;
        } else
        {
            c = Add<PlayerScoreChangedEventComponent>(GameComponentsMap.PlayerScoreChangedEvent);
        }
        c.Ignore = ignore;
        return this;
	}
	
	public GameEntity RemovePlayerScoreChangedEvent ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.PlayerScoreChangedEvent);
		return this;
	}
	
	public bool HasPlayerScoreChangedEvent 
	{
			get 
			{
				return Has(GameComponentsMap.PlayerScoreChangedEvent);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup PlayerScoreChangedEvent
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.PlayerScoreChangedEvent);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup PlayerScoreChangedEvent
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.PlayerScoreChangedEvent);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup PlayerScoreChangedEvent
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.PlayerScoreChangedEvent);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class PortalComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public PortalComponent Portal
	{
        get
        {
            if (!Has(GameComponentsMap.Portal))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<PortalComponent>(GameComponentsMap.Portal);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddPortal (GameEntity otherPortalEntity, float estimateReloadTime)
	{
		var c = Add<PortalComponent>(GameComponentsMap.Portal);
		c.OtherPortalEntity = otherPortalEntity;
        c.EstimateReloadTime = estimateReloadTime;
		return this;
	}
	
	public GameEntity SafelyAddPortal (GameEntity otherPortalEntity, float estimateReloadTime)
	{
		PortalComponent c;
        if (HasPortal)
        {
            c = Portal;
        } else
        {
            c = Add<PortalComponent>(GameComponentsMap.Portal);
        }
        c.OtherPortalEntity = otherPortalEntity;
        c.EstimateReloadTime = estimateReloadTime;
        return this;
	}
	
	public GameEntity RemovePortal ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.Portal);
		return this;
	}
	
	public bool HasPortal 
	{
			get 
			{
				return Has(GameComponentsMap.Portal);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup Portal
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.Portal);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup Portal
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.Portal);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup Portal
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.Portal);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class PositionComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public PositionComponent Position
	{
        get
        {
            if (!Has(GameComponentsMap.Position))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<PositionComponent>(GameComponentsMap.Position);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddPosition (Vector2Int position)
	{
		var c = Add<PositionComponent>(GameComponentsMap.Position);
		c.Position = position;
		return this;
	}
	
	public GameEntity SafelyAddPosition (Vector2Int position)
	{
		PositionComponent c;
        if (HasPosition)
        {
            c = Position;
        } else
        {
            c = Add<PositionComponent>(GameComponentsMap.Position);
        }
        c.Position = position;
        return this;
	}
	
	public GameEntity RemovePosition ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.Position);
		return this;
	}
	
	public bool HasPosition 
	{
			get 
			{
				return Has(GameComponentsMap.Position);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup Position
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.Position);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup Position
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.Position);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup Position
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.Position);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class ScoreTableComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public ScoreTableComponent ScoreTable
	{
        get
        {
            if (!Has(GameComponentsMap.ScoreTable))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<ScoreTableComponent>(GameComponentsMap.ScoreTable);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddScoreTable (UnityEngine.UI.Text scoreText)
	{
		var c = Add<ScoreTableComponent>(GameComponentsMap.ScoreTable);
		c.ScoreText = scoreText;
		return this;
	}
	
	public GameEntity SafelyAddScoreTable (UnityEngine.UI.Text scoreText)
	{
		ScoreTableComponent c;
        if (HasScoreTable)
        {
            c = ScoreTable;
        } else
        {
            c = Add<ScoreTableComponent>(GameComponentsMap.ScoreTable);
        }
        c.ScoreText = scoreText;
        return this;
	}
	
	public GameEntity RemoveScoreTable ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.ScoreTable);
		return this;
	}
	
	public bool HasScoreTable 
	{
			get 
			{
				return Has(GameComponentsMap.ScoreTable);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup ScoreTable
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.ScoreTable);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup ScoreTable
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.ScoreTable);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup ScoreTable
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.ScoreTable);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class TeleportToPositionRequestComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public TeleportToPositionRequestComponent TeleportToPositionRequest
	{
        get
        {
            if (!Has(GameComponentsMap.TeleportToPositionRequest))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<TeleportToPositionRequestComponent>(GameComponentsMap.TeleportToPositionRequest);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddTeleportToPositionRequest (Vector2Int newPosition)
	{
		var c = Add<TeleportToPositionRequestComponent>(GameComponentsMap.TeleportToPositionRequest);
		c.NewPosition = newPosition;
		return this;
	}
	
	public GameEntity SafelyAddTeleportToPositionRequest (Vector2Int newPosition)
	{
		TeleportToPositionRequestComponent c;
        if (HasTeleportToPositionRequest)
        {
            c = TeleportToPositionRequest;
        } else
        {
            c = Add<TeleportToPositionRequestComponent>(GameComponentsMap.TeleportToPositionRequest);
        }
        c.NewPosition = newPosition;
        return this;
	}
	
	public GameEntity RemoveTeleportToPositionRequest ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.TeleportToPositionRequest);
		return this;
	}
	
	public bool HasTeleportToPositionRequest 
	{
			get 
			{
				return Has(GameComponentsMap.TeleportToPositionRequest);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup TeleportToPositionRequest
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.TeleportToPositionRequest);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup TeleportToPositionRequest
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.TeleportToPositionRequest);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup TeleportToPositionRequest
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.TeleportToPositionRequest);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class WallMarkerComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public WallMarkerComponent WallMarker
	{
        get
        {
            if (!Has(GameComponentsMap.WallMarker))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<WallMarkerComponent>(GameComponentsMap.WallMarker);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddWallMarker (int ignore)
	{
		var c = Add<WallMarkerComponent>(GameComponentsMap.WallMarker);
		c.Ignore = ignore;
		return this;
	}
	
	public GameEntity SafelyAddWallMarker (int ignore)
	{
		WallMarkerComponent c;
        if (HasWallMarker)
        {
            c = WallMarker;
        } else
        {
            c = Add<WallMarkerComponent>(GameComponentsMap.WallMarker);
        }
        c.Ignore = ignore;
        return this;
	}
	
	public GameEntity RemoveWallMarker ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.WallMarker);
		return this;
	}
	
	public bool HasWallMarker 
	{
			get 
			{
				return Has(GameComponentsMap.WallMarker);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup WallMarker
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.WallMarker);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup WallMarker
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.WallMarker);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup WallMarker
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.WallMarker);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class WorldObjectComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public WorldObjectComponent WorldObject
	{
        get
        {
            if (!Has(GameComponentsMap.WorldObject))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<WorldObjectComponent>(GameComponentsMap.WorldObject);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddWorldObject (Transform transform)
	{
		var c = Add<WorldObjectComponent>(GameComponentsMap.WorldObject);
		c.Transform = transform;
		return this;
	}
	
	public GameEntity SafelyAddWorldObject (Transform transform)
	{
		WorldObjectComponent c;
        if (HasWorldObject)
        {
            c = WorldObject;
        } else
        {
            c = Add<WorldObjectComponent>(GameComponentsMap.WorldObject);
        }
        c.Transform = transform;
        return this;
	}
	
	public GameEntity RemoveWorldObject ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.WorldObject);
		return this;
	}
	
	public bool HasWorldObject 
	{
			get 
			{
				return Has(GameComponentsMap.WorldObject);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup WorldObject
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.WorldObject);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup WorldObject
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.WorldObject);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup WorldObject
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.WorldObject);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class WorldObjectCreateRequestComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public WorldObjectCreateRequestComponent WorldObjectCreateRequest
	{
        get
        {
            if (!Has(GameComponentsMap.WorldObjectCreateRequest))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<WorldObjectCreateRequestComponent>(GameComponentsMap.WorldObjectCreateRequest);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddWorldObjectCreateRequest (Transform transform)
	{
		var c = Add<WorldObjectCreateRequestComponent>(GameComponentsMap.WorldObjectCreateRequest);
		c.Transform = transform;
		return this;
	}
	
	public GameEntity SafelyAddWorldObjectCreateRequest (Transform transform)
	{
		WorldObjectCreateRequestComponent c;
        if (HasWorldObjectCreateRequest)
        {
            c = WorldObjectCreateRequest;
        } else
        {
            c = Add<WorldObjectCreateRequestComponent>(GameComponentsMap.WorldObjectCreateRequest);
        }
        c.Transform = transform;
        return this;
	}
	
	public GameEntity RemoveWorldObjectCreateRequest ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.WorldObjectCreateRequest);
		return this;
	}
	
	public bool HasWorldObjectCreateRequest 
	{
			get 
			{
				return Has(GameComponentsMap.WorldObjectCreateRequest);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup WorldObjectCreateRequest
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.WorldObjectCreateRequest);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup WorldObjectCreateRequest
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.WorldObjectCreateRequest);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup WorldObjectCreateRequest
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.WorldObjectCreateRequest);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class WorldObjectDestroyedEventComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public WorldObjectDestroyedEventComponent WorldObjectDestroyedEvent
	{
        get
        {
            if (!Has(GameComponentsMap.WorldObjectDestroyedEvent))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<WorldObjectDestroyedEventComponent>(GameComponentsMap.WorldObjectDestroyedEvent);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddWorldObjectDestroyedEvent (bool deleteEntity)
	{
		var c = Add<WorldObjectDestroyedEventComponent>(GameComponentsMap.WorldObjectDestroyedEvent);
		c.DeleteEntity = deleteEntity;
		return this;
	}
	
	public GameEntity SafelyAddWorldObjectDestroyedEvent (bool deleteEntity)
	{
		WorldObjectDestroyedEventComponent c;
        if (HasWorldObjectDestroyedEvent)
        {
            c = WorldObjectDestroyedEvent;
        } else
        {
            c = Add<WorldObjectDestroyedEventComponent>(GameComponentsMap.WorldObjectDestroyedEvent);
        }
        c.DeleteEntity = deleteEntity;
        return this;
	}
	
	public GameEntity RemoveWorldObjectDestroyedEvent ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.WorldObjectDestroyedEvent);
		return this;
	}
	
	public bool HasWorldObjectDestroyedEvent 
	{
			get 
			{
				return Has(GameComponentsMap.WorldObjectDestroyedEvent);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup WorldObjectDestroyedEvent
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.WorldObjectDestroyedEvent);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup WorldObjectDestroyedEvent
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.WorldObjectDestroyedEvent);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup WorldObjectDestroyedEvent
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.WorldObjectDestroyedEvent);
            return group as GameGroup;
        }
    }
}
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a NanoECS.Generator. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


public partial class WorldObjectNewPositionRequestComponent : ComponentEcs 
{
}
public partial class GameEntity 
{
	public WorldObjectNewPositionRequestComponent WorldObjectNewPositionRequest
	{
        get
        {
            if (!Has(GameComponentsMap.WorldObjectNewPositionRequest))
            {
				throw new System.Exception("Entity doesn't have an existing component");
            }
            return Get<WorldObjectNewPositionRequestComponent>(GameComponentsMap.WorldObjectNewPositionRequest);
        }
	}
}
public partial class GameEntity 
{
	public GameEntity AddWorldObjectNewPositionRequest (Vector2Int newPosition)
	{
		var c = Add<WorldObjectNewPositionRequestComponent>(GameComponentsMap.WorldObjectNewPositionRequest);
		c.NewPosition = newPosition;
		return this;
	}
	
	public GameEntity SafelyAddWorldObjectNewPositionRequest (Vector2Int newPosition)
	{
		WorldObjectNewPositionRequestComponent c;
        if (HasWorldObjectNewPositionRequest)
        {
            c = WorldObjectNewPositionRequest;
        } else
        {
            c = Add<WorldObjectNewPositionRequestComponent>(GameComponentsMap.WorldObjectNewPositionRequest);
        }
        c.NewPosition = newPosition;
        return this;
	}
	
	public GameEntity RemoveWorldObjectNewPositionRequest ()
	{
		
		
		if (IsReserved) throw new System.Exception("Unable to remove component from reserved entity");
		
		RemoveComponentOfIndex(GameComponentsMap.WorldObjectNewPositionRequest);
		return this;
	}
	
	public bool HasWorldObjectNewPositionRequest 
	{
			get 
			{
				return Has(GameComponentsMap.WorldObjectNewPositionRequest);
			}
	}
	
}
public partial class GameWithBuilder : WithBuilder<GameEntity> 
{
    public GameGroup WorldObjectNewPositionRequest
    {
        get
        {
            group.WithTypes.Add(GameComponentsMap.WorldObjectNewPositionRequest);
            return group as GameGroup;
        }
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{

    public GameGroup WorldObjectNewPositionRequest
    {
        get
        {
            group.WithoutTypes.Add(GameComponentsMap.WorldObjectNewPositionRequest);
            return group as GameGroup;
        }
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameGroup WorldObjectNewPositionRequest
    {
        get
        {
            group.AnyofTypes.Add(GameComponentsMap.WorldObjectNewPositionRequest);
            return group as GameGroup;
        }
    }
}
public partial class GameWithBuilder : WithBuilder<GameEntity>
{
    public GameWithBuilder (Group<GameEntity> group) : base(group)
    {
    }
}

public partial class GameWithoutBuilder : WithoutBuilder<GameEntity>
{
    public GameWithoutBuilder (Group<GameEntity> group) : base(group)
    {
    }
}

public partial class GameAnyofBuilder : AnyofBuilder<GameEntity>
{
    public GameAnyofBuilder (Group<GameEntity> group) : base(group)
    {
    }
}

public partial class GameGroup : Group<GameEntity>
{
	public GameGroup()
	{
	    withBuilder = new GameWithBuilder(this);
        withoutBuilder = new GameWithoutBuilder(this);
        anyofBuilder = new GameAnyofBuilder(this);
	}
	
	public GameCollector OnAdd
    {
        get
        {
            var onAdd = new GameCollector();
            InternalOnAdd(onAdd);
            return onAdd;
        }
    }
	
	public GameCollector OnRemove
    {
        get
        {
            var onRemove = new GameCollector();
            InternalOnRemove(onRemove);
            return onRemove;
        }
    }
	
	public GameCollector OnDestroy
    {
        get
        {
            var onDestroy = new GameCollector();
            InternalOnDestroy(onDestroy);
            return onDestroy;
        }
    }
	
	public GameWithBuilder With
    {
        get { return withBuilder as GameWithBuilder; }
    }

    public GameWithoutBuilder Without
    {
        get { return withoutBuilder as GameWithoutBuilder; }
    }

    public GameAnyofBuilder AnyOf
    {
        get { return anyofBuilder as GameAnyofBuilder; }
    }
}

public partial class GameCollector : Collector<GameEntity>
{
}

public static class GameComponentsMap
{
	public const int DeadPlayerMarker = 0;
    public const int EnergizerMarker = 1;
    public const int Food = 2;
    public const int GameStateSwitchRequest = 3;
    public const int Ghost = 4;
    public const int GhostFearStateRequest = 5;
    public const int GhostInFearState = 6;
    public const int InitializedScoreTableMarker = 7;
    public const int ItemMarker = 8;
    public const int ItemTakenEvent = 9;
    public const int Movement = 10;
    public const int MovementStoppedMarker = 11;
    public const int MovementTarget = 12;
    public const int PauseMenu = 13;
    public const int Player = 14;
    public const int PlayerDeathRequest = 15;
    public const int PlayerScoreChangedEvent = 16;
    public const int Portal = 17;
    public const int Position = 18;
    public const int ScoreTable = 19;
    public const int TeleportToPositionRequest = 20;
    public const int WallMarker = 21;
    public const int WorldObject = 22;
    public const int WorldObjectCreateRequest = 23;
    public const int WorldObjectDestroyedEvent = 24;
    public const int WorldObjectNewPositionRequest = 25;

	public static readonly string[] Names =
	{
		"DeadPlayerMarker",
        "EnergizerMarker",
        "Food",
        "GameStateSwitchRequest",
        "Ghost",
        "GhostFearStateRequest",
        "GhostInFearState",
        "InitializedScoreTableMarker",
        "ItemMarker",
        "ItemTakenEvent",
        "Movement",
        "MovementStoppedMarker",
        "MovementTarget",
        "PauseMenu",
        "Player",
        "PlayerDeathRequest",
        "PlayerScoreChangedEvent",
        "Portal",
        "Position",
        "ScoreTable",
        "TeleportToPositionRequest",
        "WallMarker",
        "WorldObject",
        "WorldObjectCreateRequest",
        "WorldObjectDestroyedEvent",
        "WorldObjectNewPositionRequest"
	};
	
	public static readonly System.Type[] Types = 
	{
		typeof(DeadPlayerMarkerComponent),
        typeof(EnergizerMarkerComponent),
        typeof(FoodComponent),
        typeof(GameStateSwitchRequestComponent),
        typeof(GhostComponent),
        typeof(GhostFearStateRequestComponent),
        typeof(GhostInFearStateComponent),
        typeof(InitializedScoreTableMarkerComponent),
        typeof(ItemMarkerComponent),
        typeof(ItemTakenEventComponent),
        typeof(MovementComponent),
        typeof(MovementStoppedMarkerComponent),
        typeof(MovementTargetComponent),
        typeof(PauseMenuComponent),
        typeof(PlayerComponent),
        typeof(PlayerDeathRequestComponent),
        typeof(PlayerScoreChangedEventComponent),
        typeof(PortalComponent),
        typeof(PositionComponent),
        typeof(ScoreTableComponent),
        typeof(TeleportToPositionRequestComponent),
        typeof(WallMarkerComponent),
        typeof(WorldObjectComponent),
        typeof(WorldObjectCreateRequestComponent),
        typeof(WorldObjectDestroyedEventComponent),
        typeof(WorldObjectNewPositionRequestComponent)
	};
}
public partial class Contexts 
{
	public GameContext Game = new GameContext(GameComponentsMap.Types);
}

public static class GameContextExtensions 
{
	public static GameEntity ToGameEntity(this int id, Contexts contexts) 
	{
		return contexts.Game.GetEntity(id);
	}
}
public partial class GameContext : Context<GameEntity>
{
	
	
	public GameGroup GetGroup()
    {
		return (GameGroup)CreateGroupInternal(new GameGroup());
    }
	
	public GameContext(System.Type[] componentTypes) : base(componentTypes)
    {
    }
}
public partial class GameEntity : Entity
{
}
namespace NanoEcs 
{
	public class Game : System.Attribute 
	{
	}
}